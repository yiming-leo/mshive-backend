name: Release

on:
  push:
    branches:
      - release

jobs:
  build:
    name: Build with Maven
    runs-on: ubuntu-latest
    steps:
      #---------receive artifact to current job-------
      - name: Checkout Repository
        uses: actions/checkout@v3
      #---------set up maven and maven package-------
      - name: Set up JDK & Maven
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'
          cache: 'maven'

      - name: Build with Maven
        run: mvn -B package
      #---------upload artifact to other job-------
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: packaged-jars
          path: target/*.jar

  deploy:
    name: Deploy to Server
    needs: build
    runs-on: ubuntu-latest
    steps:
      #---------receive artifact to current job-------
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: packaged-jars
          path: target
      #---------(use ssh) rm -rf mshive-backend dir-------
      - name: SSH and Docker Build & Run
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "rm -rf old target files..."
            cd /mydata/project_file
            rm -rf mshive_backend
      #---------(use ssh) copy artifact to private server-------
      - name: Copy JAR file to Server
        uses: appleboy/scp-action@master
#        env:
#          HOST: ${{ secrets.SERVER_HOST }}
#          USERNAME: ${{ secrets.SERVER_USERNAME }}
#          KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        with:
          source: "./target/mshive-backend.jar, ./Dockerfile"
          target: "/mydata/project_file/mshive_backend"
          host: ${{ secrets.SERVER_HOST }}
          port: 22
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}

#  run:
#    name: Run Jar on Server
#    needs: deploy
#    runs-on: ubuntu-latest
#    steps:
#      #---------use ssh login to private server-------
#      - name: SSH into Server and Run Jar
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.SERVER_HOST }}
#          username: ${{ secrets.SERVER_USERNAME }}
#          key: ${{ secrets.SSH_PRIVATE_KEY }}
#          script: |
#            cd /mydata/project_file/
#            ls && pwd && whoami
##            java -jar mshive-backend-0.0.1-SNAPSHOT.jar

  dockerize:
    name: Build and Run Docker image
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      #---------(use ssh) docker build & run-------
      - name: SSH and Docker Build & Run
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Building Docker image..."
            
            # jack in Dockerfile directory
            cd /mydata/project_file/mshive_backend/target
            
            # use current directory's Dockerfile to build image
            docker build -t mshive-backend .